which.max(dataset$Life.Exp)
which.max(statedata$Life.Exp)
state.name[11]
summary(a)
a$residuals
sort(a$residuals)
sqrt(2)
sqrt(2^2)
sqrt(2^2 + 9)
sqrt(1 + 16)
temp = open.csv("climate_change.csv")
temp = read.csv("climate_change.csv")
str(temp)
?split
?subset
trainset = subset(temp, Year <= 2006)
testset = subset(temp, Year > 2006)
str(trainset)
str(testset)
lr = lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI + Aerosols, data = temp)
summary(lr)
cor(N2O, MEI)
cor(temp$N2O, temp$MEI)
cor(temp$N2O, temp$CO2)
cor(temp$N2O, temp$CH4
)
cor(temp$N2O, temp$CFC.11)
cor(temp$N2O, temp$CFC.12)
cor(temp$N2O, temp$Aerosols)
cor(temp$N2O, temp$TSI)
cor(temp$CFC.11, temp$MEI)
cor(temp$CFC.11, temp$CO2)
cor(temp$CFC.11, temp$CH4)
cor(temp$CFC.11, temp$N2O)
cor(temp$CFC.11, temp$Aerosols)
cor(temp$CFC.11, temp$TSI)
lr = lm(Temp ~ MEI + N2O + TSI + Aerosols, data = temp)
summary(lr)
lr = lm(Temp ~ MEI + N2O + TSI + Aerosols, data = trainset)
summary(lr)
?step
fulllm=lm(Temp $ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI + Aerosols, data=temp)
summary(temp)
fulllm=lm(Temp $ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI + Aerosols, data=temp)
fulllm=lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI + Aerosols, data=temp)
s = step(fulllm)
summary(s)
p predict(s, newdata = testset)
p = predict(s, newdata = testset)
p
summary(testset)
testlm=lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI + Aerosols, data=testset)
summary(testlm)
pisaTrain = read.csv("pisa2009train.csv")
pisaTest = read.csv("pisa2009test.csv")
str(pisaTrain)
tapply(pisaTrain$maile == "1", pisaTrain$readingScore, mean)
tapply(pisaTrain$male == "1", pisaTrain$readingScore, mean)
tapply(pisaTrain$male == "1", pisaTrain$readingScore, sum)
a = tapply(pisaTrain$male == "1", pisaTrain$readingScore, sum)
a
sum(a)
a = tapply(pisaTrain$readingScore, pisaTrain$male == "1", sum)
a
a = tapply(pisaTrain$readingScore, pisaTrain$male == "1", mean)
a
summary(pisa2009Train)
ls
ls()
summary(pisaTrain)
pisaTrain = na.omit(pisaTrain)
pisaTest = na.omit (pisaTest)
str(pisaTrain)
str(pisaTest)
str(pisaTest)
str(pisaTrain)
summary(pisaTrain)
pisaTrain$raceeth = relevel(pisaTrain$raceeth,"White")
pisaTest$raceeth = relevel(pisaTest$raceeth,"White")
str(pisaTrain)
lmScore = lm(readingScore ~ ., data=pisaTrain)
summary(lmScore)
a = rmse(pisaTrain)
lm
lm()
summary(lm)
summary(lmScore()
summary(lmScore)
summary(lmScore)
sqrt (mean(lmScore - pisaTrain)^2)
summary(pisaTrain)
sqrt (mean(lmScore - pisaTrain$readingScore)^2)
sqrt (mean(lmScore$readingScore - pisaTrain$readingScore)^2)
lmP = predict(lmScore)
lmp
lmP
summary(lmP)
str(lmP)
sqrt (mean(lmP - pisaTrain$readingScore)^2)
sqrt(sum((lmP - pisaTrain$readingScore)^2) / nrow(pisaTrain))
sqrt(mean(lmScore$residuals^2))
lmScore $residuals
summary(lmScore)
summary(pisaTrain)
summary(lmScore)
(11 * 29.543) - (9 * 29.543)
lmT = predict(lmScore, newdata=pisaTest)
predTest = predict(lmScore, newdata=pisaTest)
summary(predTest)
637.7 - 353.2
summary(pisaTest)
sum((predTest - pisaTest$readScore) ^ 2)
predTest
sum((predTest - pisaTest$readScore) ^ 2)
predTest = predict(lmScore, newdata=pisaTest)
a = sum((predTest - pisaTest$readScore) ^ 2)
a
a = sum((predTest - readScore) ^ 2)
summary(pisaTest)
a = sum((predTest - pisaTest$readingScore) ^ 2)
a
sqrt( a / nrow(pisaTest))
predTrain = predict(lmScore)
a = sum((predTrain - pisaTrain$readingScore) ^ 2)
a
sqrt ( a / nrow(pisaTrain))
mean(predTrain)
predTest
sst = sum ((predTest - mean(pisaTest$readingScore)) ^ 2)
sst
sst = sum ((predTest - 517.9629) ^ 2)
sst
sst / nrow(pisaTest)
predictTest = predict(lmScore, newdata = pisaTest)
summary(predictTest)
lmscore
lmScore
summary(lmScore)
ls()
SSE = sum((predTest - pisa$Test)^ 2)
SSE = sum((predTest - pisaTest$readingScore)^ 2)
SST = sum( (mean(pisaTrain$readingScore) - pisaTest$readingScore)^2)
R2  = 1 - SSE/SST
R2
rm(list=ls())
ls()
FluTrain = read.csv("FluTrain.csv")
summary(FluTrain)
str(FluTrain)
?max
max(FluTrain)
max(FluTrain$ILI)
?argmax
which.max(FluTrain$ILI)
Week[303]
FluTrain[303]
FluTrain$Week[303]
FluTrain$Week[1]
str(Flu$Train)
str(FluTrain)
which.max(FluTrain$Queries)
a = c(1,2,3,4,5,6)
which.max(a)
a[6]
which.max(FluTrain$Queries)
FluTrain[303]
summary(FluTrain)
max(FluTrain$Queries)
hist(FluTrain$ILI)
?plot
plot(FluTrain$ILI, FluTrain$Queries)
plot(FluTrain$ILI, FluTrain$Queries, log="x")
plot(FluTrain$ILI, FluTrain$Queries)
plot(FluTrain$ILI, FluTrain$Queries, log="x")
plot(FluTrain$ILI, FluTrain$Queries)
plot(FluTrain$ILI, FluTrain$Queries, log="x")
FluTrend1 = lm(queries ~ log(ILI), data=FluTrain)
FluTrend1 = lm(Queries ~ log(ILI), data=FluTrain)
summary(FluTrend1)
FluTrend1 = lm(log(ILI) ~ Queries, data=FluTrain)
summary(FluTrend1)
cor(FluTrain$ILI, FluTrain$Queries)
cor(log(FluTrain$ILI), FluTrain$Queries)
cor(log(FluTrain$ILI), FluTrain$Queries)^2
cor(log(FluTrain$ILI), FluTrain$Queries)^2
FluTest = read.csv("FluTest.csv")
PredTest1 = exp(predict(FluTrend1, newdata = FluTest))
summary(PredTest1)
PredTest1
FluTest
PredTest1[11]
(0.4329349 - 2.187378)/0.4329349
(2.2934216 - 2.187378)/2.2934216
PredTest1$residuals
FluTrend1
FluTrend1$residuals
sqrt(mean(FluTrend1$residuals ^ 2))
r = sqrt ( sum((PredTest1 - FluTest$ILI)^2) / nrow(FluTest))
r
install.packages("zoo")
library(zoo)
ILILag2 = lag(zoo(FluTrain$ILI), -2, na.pad=TRUE)
FluTrain$ILILag2 = coredata(ILILag2)
summary(ILILag2)
summary(FluTrain)
plot(log(FluTrain$ILILag2), log(FluTrain$ILI))
FluTrend2 = lm(log(ILI) ~ Queries, log(ILILag2), data=FluTrain)
FluTrend2 = lm(log(ILI) ~ Queries + log(ILILag2), data=FluTrain)
summary(FluTrend2)
summary(FluTrend1)
ILILag3 = lag(zoo(FluTest$ILI), -2, na.pad=TRUE)
FluTest$ILILag2 = coredata(ILILag3)
summary(FluTest)
summary(ILILag3)
nrow(FluTrain)
FluTrain[417]
FluTrain$ILILag2[417]
FluTrain$ILILag2[416]
FluTest$ILILag2[0]
FluTest$ILILag2[1]
FluTest$ILILag2[2]
FluTest$ILILag2[3
]
FluTest$ILILag2[1]= 1.518106
FluTest$ILILag2[2] = 1.663954
summary(FluTest)
FluTest$ILILag2[2]
FluTest$ILILag2[1]
FluTrain$ILILag2[418]
FluTrain$ILILag2[417]
FluTrain$ILILag2[416]
FluTest$ILILag2[1]
FluTrain$ILILag2[1]
FluTrain$ILILag2[2]
FluTrain$ILILag2[3]
which(FluTrain$ILILag2 == "1.852736")
which(FluTrain$ILILag2 == 1.852736)
which(FluTrain$ILILag2 == 2.12413)
which(FluTrain$ILILag2 == "2.12413")
FluTrain
FluTest
FluTrain
FluTest$ILILag2[2] = 2.1241299
FluTest$ILILag2[1]= 1.852736
FluTrain$ILILag2[2]
FluTest$ILILag2[2]
FluTrends2 = lm(ILI, ~ Queries + log(ILILag2), newdata=FluTest)
FluTrends2 = lm(ILI ~ Queries + log(ILILag2), newdata=FluTest)
FluTrends2 = lm(ILI ~ Queries + log(ILILag2), data=FluTest)
summary(FluTrends2)
