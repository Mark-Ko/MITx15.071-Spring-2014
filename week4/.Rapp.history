table(gerber$voting, pred1 > 0.3)
(51966 + 134513) / (134513 + 100875 + 56730 + 51966)
table(gerber$voting, pred1 > 0.5)
pred1 = predict (model, type="response")
table(gerber$voting, pred1 > 0.5)
table(gerber$voting, pred1 > 0.3)
table(gerber$voting, pred1 > 0.5)
summary(pred1)
str(pred1)
gerber$voting
table(gerber$voting, pred1 > 0.5)
235388/(235388+108696)
library(ROCR)
ROCRpred = prediction(pred1, gerber$voting)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
as.numeric(performance(ROCRpred,"auc")@y.values)
library(rpart)
library(rpart.plot)
CARTmodel = rpart(voting~civicduty + hawthorne + self + neighbors, data=gerber)
prp(CARTmodel)
CARTmodel2 = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber, cp=0.0)
prp(CARTmodel2)
CARTmodel3 = rpart(voting ~ civicduty + hawthorne + self + neighbors + sex, data=gerber, cp=0.0)
table(CARTmodel3)
table(gerber$voting,gerber$sex)
55458 / (55458 + 116831)
53238/(53238 + 118557)
prp(CARTmodel3)
str(voting)
str(gerber)
CARTmodel4 = rpart(voting ~ control, data=gerber, cp=0.0)
CARTmodel5 = rpart(voting ~ control + sex, data=gerber, cp=0.0)
prp(CARTmodel4, digits=6)
.34 - .296638
prp(CARTmodel5, digits=6)
model=glm(voting ~ sex + control, data=gerber, family="binomial")
summary(model)
Possibilities = data.frame(sex=c(0,0,1,1),control=c(0,1,0,1))
predict(LogModelSex, newdata=Possibilities, type="response")
predict(model, newdata=Possibilities, type="response")
0.345818 - 0.2908065
prp(CARTmodel5, digits = 6)
0.302795-0.2908065
LogModel2 = glm(voting ~ sex + control + sex:control, data=gerber, family="binomial")
summary(LogModel2)
predict(LogModel2, newdata=Possibilities, type="response")
0.290456 - 0.2904558
13/18
rm(list=ls())
letters = read.csv("letters_ABPR.csv")
letters$isB = as.factor(letters$letter == "B")
set.seed(1000)
library(caTools)
split = sample.split(letters$isB, SplitRatio = 0.5)
train = subset(letters, split== TRUE)
test = subset(letters, split==FALSE)
table(test$isB)
1175/(1175+383)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
predictCart = predict(CARTb, newdata= test, type="class")
table(test$isB, predictCart)
(340+1118)/(1118+57+43+340)
library(randomForest)
set.seed(1000)
sf = randomForest(isB ~ . - letter, data=train)
predictForest = predict(sf, newdata=test)
table(test$isB, predictForest)
(1165 + 374)/(1165+10+9+374)
letters$letter = as.factor(letters$letter)
set.seed(2000)
split = sample.split(letters$letter, SplitRatio=0.5)
train=subset(letters, split == TRUE)
test = subset(letters, split == FALSE)
table(letters$letter)
803 / (789 + 766 + 803 + 758)
table(test$letter)
st = rpart(letter ~ . -isB, data=train, method="class")
predictcart = predict(st, newdata=test, type="class")
table(test$letter, predictcart)
(348+318+363+340)/nrow(test)
set.seed(1000)
sf = randomForest(letter ~ . - isB, data=train)
pf = predict(sf, newdata=test)
table(letters$letter, pf)
table(test$letter, pf)
(390+380+393+364)/nrow(test)
rm(list = ls())
data(state)
statedata = data.frame(state.x77)
str(statedata)
linreg = lm(Life.Exp ~ ., data = statedata)
summary(linreg)
tempP = predict(Life.Exp)
tempP = predict(linreg)
SSE = sum((tempP = statedata$Life.Exp)^2)
SSE
tempP
statedata$Life.Exp
linreg = lm(Life.Exp ~ ., data = statedata)
t = predict(linreg)
SSE = sum((t - statedata$Life.Exp)^2)
SSE
linreg2 = lm(Life.Exp ~ Population + Murder + Frost + HS.Grad, data=statedata)
summary(linreg2)
t2 = predict(linreg2)
SSE = sum((t2 - statedata$Life.Exp)^2)
SSE
library()
library(rpart)
library(rpart.plot)
sp = rpart(Life.Exp ~ Population + Income + Illiteracy + Murder + HS.Grad + Frost + Area, data=statedata)
prp(sp)
pred1 = predict(sp)
sum((pred1 - statedata$Life.Exp)^2)
sp = rpart(Life.Exp ~ Population + Income + Illiteracy + Murder + HS.Grad + Frost + Area, data=statedata, control=rpart.control(minbucket=5))
prp(sp)
pred1 = predict(sp)
sum((pred1 - statedata$Life.Exp)^2)
spArea = rpart(Life.Exp ~ Area, minbucket=1)
spArea = rpart(Life.Exp ~ Area, data=statedata, minbucket=1)
pred2 = predict(spArea)
sum((pred2 - statedata$Life.Exp)^2)
library(caret)
set.seed(111)
library(e1071)
fitControl = trainControl(method="cv", number=10)
cartGrid = expand.grid(.cp(1:50)*0.01)
cartGrid = expand.grid(.cp=(1:50)*0.01)
train(Life.Exp ~ ., data="statedata", method="rpart", trControl=fitControl, tuneGrid = cartGrid)
train(Life.Exp ~ ., data=statedata, method="rpart", trControl=fitControl, tuneGrid = cartGrid)
stCV = rpart(Life.Exp ~ ., data=statedata, control=rpart.control(cp=0.12))
predCV = predict(stCV)
prp(stCV)
sum((predCV - Life.Exp)^2)
sum((predCV - statedata$Life.Exp)^2)
set.seed(111)
train(Life.Exp ~ Area, data=statedata, method="rpart", trControl=fitControl, tuneGrid = cartGrid)
st2 = rpart(Life.Exp ~ Area, data=statedata, cp=0.02)
prp(st2)
prp(st2)
51e3
pred2 = predict(st2)
sum((pred2 - statedata$Life.Exp)^2)
rm(list=ls())
cen = read.csv("census.csv")
str(cen)
set.seed(2000)
spl = sample.split(cen, SplitRatio=0.6)
train = subset(cen,split == TRUE)
train = subset(cen,spl == TRUE)
test = subset(cen, spl == FALSE)
model = glm(over50k ~ ., data=cen, family = "binomial")
summary(model)
model = glm(over50k ~ age + workclass + education + martialstatus + occupation + relationship + race + sex + capitalgain + capitalloss + hoursperweek + nativecountry, data=cen, family = "binomial")
model = glm(over50k ~ age + workclass + education + maritalstatus + occupation + relationship + race + sex + capitalgain + capitalloss + hoursperweek + nativecountry, data=cen, family = "binomial")
summary(mode)
summary(model)
summary(cen)
cen$workclass = as.factor(cen$workclass)
model = glm(over50k ~ age + workclass + education + maritalstatus + occupation + relationship + race + sex + capitalgain + capitalloss + hoursperweek + nativecountry, data=train, family = "binomial")
summary(model)
summary(cen)
cen$nativecountry = as.factor(cen$nativecountry)
summary(cen)
cen$race = as.factor(cen$race)
cen$relationship = as.factor(cen$relationship)
cen$occupation = as.factor(cen$occupation)
cen$education  = as.factor(cen$education)
cen$workclass = as.factor(cen$workclass)
summary(cen)
spl = sample.split(cen, SplitRatio = 0.6)
set.seed(2000)
spl = sample.split(cen, SplitRatio = 0.6)
train = subset(cen, spl==TRUE)
test = subset(cen, spl==FALSE)
model = glm(over50k ~ ., data=train, family=binomial)
summary(model)
rm(list=ls())
cen = read.csv("census.csv")
library(caTools)
set.seed(2000)
spl = sample.split(cen$over50k, SplitRatio=0.6)
train = subset(cen, spl==TRUE)
test = subset(cen,spl==FALSE)
censusglm = glm(over50k ~ ., family="binomial", data=train)
mmary(censusglm)
summary(censusglm)
pred1 = predict(censusglm,type="response", newdata=test)
table(test$over50k, pred1 > 0.5)
(1888 + 9051) / (9051 + 662 + 1190 + 1888)
summary(test)
9713 / (9713/3078)
9713 / (9713+3078)
ROCRpred = prediction(pred1, test$over50k)
ROCRperf = performance(ROCRpred, "tpr","fpr")
as.numeric(performance(ROCRpred,'auc')@y.values)
st = rpart(over50k ~ . , data=cen, method="class")
prp(st)
st = rpart(over50k ~ . , data=train, method="class")
prp(st)
pc = predict(st, newdata=test,type="class")
table(test$over50k,pc)
(9243+1596) / (9243 + 470 + 1482 + 1596)
ls
ls()
predROCLR = predict(pred1,newdata=test)
predROCLR = predict(censusglm,newdata=test)
predROCCART = predict(st,newdata=test)
predLR = prediction(predROCLR[,2],test$over50k)
predLR = prediction(predROCLR,test$over50k)
predCART = prediction(predROCCART,test$over50k)
predROCCART = predict(st,newdata=test)
predCART = prediction(predROCCART,test$over50k)
perf= performance(predLR,"tpr","fpr")
plot(perf)
perf = performance(predROCCART, "tpr", "fpr")
predC = predict(st, newdata=test)
str(predC)
pred2 = prediction(predC,test$over50k)
str(test)
pred2 = prediction(predC[,2],test$over50k)
perf2 = performance(pred2, "tpr","fpr")
plot(perf2)
ROCRpred=prediction(predC[,2],test$over50k)
as.numeric(performance(ROCRpred,'auc')@y.values)
set.seed(1)
trainSmall = train[sample(nrow(train),2000),]
sf = randomForest(over50k ~ ., data=trainSmall)
summary(trainSmall)
str(trainSmall)
set.seed(1)
sf = randomForest(over50k ~ . - nativecountry, data=trainSmall)
pf = predict(sf, newdata=test)
table(test$over50k, pf)
(8861 + 2038)/ (8861 + 852 + 1040 + 2038)
vu = varUsed(sf, count=TRUE)
vusorted = sort(vu, descreasing=FALSE, index.return=TRUE)
vusorted = sort(vu, decreasing=FALSE, index.return=TRUE)
dotchart(vusorted$x, names(sf$forest$xlevels[vusorted$ix]))
varImpPlot(sf)
set.seed(2)
fitControl = trainControl(method="cv", number=10)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
train(over50k ~ ., data=train, method="rpart", trControl = fitControl, tuneGrid = cartGrid)
sf2 = rpart(over50k ~ ., method="class", data=train, cp=0.002)
predsf = predict(sf2, newdata=test, type="class")
table(test$over50k, prefsf)
table(test$over50k, predsf)
(9178+1838)/nrow(test)
prp(sf2)
