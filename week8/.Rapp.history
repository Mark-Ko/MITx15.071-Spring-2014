table(limited$Anonymity.Possible)
hist(poll$Age)
hist(poll$Age, breaks =20)
hist(poll$Age, breaks =5
)
hist(poll$Age, breaks =20)
table(poll$Age, poll$Info.On.Internet)
max(table(poll$Age, poll$Info.On.Internet))
jitter(c(1,2,3))
plot(jitter(c(1,2,3)))
jitter(c(1,2,3))
plot(jitter(limited$Info.On.Internet),limited$Age)
plot(limited$Age,jitter(limited$Info.On.Internet))
plot(limited$Age,limited$Info.On.Internet)
plot(limited$Age,jitter(limited$Info.On.Internet))
table(poll$Info.On.Internet, poll$Smartphone)
a = tapply(poll$Info.On.Internet, poll$Smartphone)
a
a = tapply(poll$Info.On.Internet, poll$Smartphone, mean)
a
table(poll$Info.On.Internet, poll$Smartphone)
mean(table(poll$Info.On.Internet, poll$Smartphone))
tapply(poll$Info.On.Internet, poll$Smartphone, mean)
a = subset(poll$Info.On.Internet, poll$Smartphone == 1)
a
mean(a)
a = subset(poll$Info.On.Internet, poll$Smartphone == 0)
mean(a)
summary(a)
table(poll$Tried.Masking.Identity, poll$Smartphone)
table(poll$Info.On.Internet, poll$Smartphone)
table(poll$Tried.Masking.Identity, poll$Smartphone)
summary(poll)
table(poll$Tried.Masking.Identity, poll$Internet.Use)
127/128
127 / (127+641+15+1)
table(poll$Tried.Masking.Identity, poll$Smartphone, poll$Internet.Use)
tapply(poll$Tried.Masking.Identity, poll$Internet.Use == 1, sum)
CPS = read.csv("CPSData.csv")
str(CPS)
summary(CPS)
sort(table(CPS$State))
summary(CPS)
(116639 + 7073) / (116639 + 7073 + 7590)
sort(table(CPS$Race))
a = subset(CPS$Race, CPS$Hispanic > 250)
a
table(CPS$Race, CPS$Hispanic)
summary(CPS)
table(CPS$Region, is.na(CPS$Married))
sum(table(CPS$Region, is.na(CPS$Married)))
table(CPS$Region, is.na(CPS$Married))
tapply(CPS$Region,CPS$Married, sum)
tapply(CPS$Region,is.na(CPS$Married), sum)
subset(CPS$Region, is.na(CPS$Married))
sum(subset(CPS$Region, is.na(CPS$Married)))
table(CPS$Region, is.na(CPS$Married))
table(CPS$Sex, is.na(CPS$Married))
colSums(table(CPS$Sex, is.na(CPS$Married)))
colSums(table(CPS$Region, is.na(CPS$Married)))
colSums(table(CPS$Age, is.na(CPS$Married)))
table(CPS$Married, CPS$Region)
colSums(table(CPS$Citizenship, is.na(CPS$Married)))
table(CPS$Citizenship, is.na(CPS$Married))
table(CPS$Age, is.na(CPS$Married))
table(CPS$State, is.na(CPS$MetroAreaCode)
)
table(CPS$State, is.na(CPS$MetroAreaCode))
nrow(table(CPS$State, is.na(CPS$MetroAreaCode)))
table(CPS$Region, is.na(CPS$MetroAreaCode))
tapply(CPS$State, CPS$MetroAreaCode, mean)
tapply(CPS$State, is.na(CPS$MetroAreaCode), mean)
tapply(CPS$MetroAreaCode, CPS$State, mean)
tapply(CPS$MetroAreaCode, CPS$State)
mean(tapply(CPS$MetroAreaCode, CPS$State))
table(CPS$MetroAreaCode, CPS$State)
table(CPS$State, CPS$MetroAreaCode)
mean(CPS$MetroAreaCode)
tapply(mean(CPS$MetroAreaCode), CPS$State)
tapply(mean(CPS$MetroAreaCode), CPS$State, is.na(CPS$MetroAreaCode))
tapply(mean(CPS$MetroAreaCode), CPS$State, is.na)
tapply(CPS$MetroAreaCode, CPS$State, mean)
mac = open.csv("MetroAreaCodes.csv")
mac = read.csv("MetroAreaCodes.csv")
str(mac)
cm = open.csv("CountryMap.csv")
cm = read.csv("CountryMap.csv")
ls
ls()
cm = read.csv("CountryCodes.csv")
str(cm)
CPS = merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
CPS = merge(CPS, map, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
CPS = merge(CPS, mac, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
str(CPS)
summary(CPS)
sort(CPS$MetroArea)
summary(CPS)
table(CPS$Sex, CPS$MetroArea)
summary(CPS)
tapply(CPS$MetroArea, CPS$Hispanic, mean)
tapply(CPS$MetroArea, CPS$Hispanic == TRUE, mean)
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean))
sort(tapply(CPS$Education == "High School", CPS$MetroArea, mean))
tapply(CPS$Education == "High School", CPS$MetroArea, mean)
sort(tapply(CPS$Education == "High School", CPS$MetroArea, mean))
sort(tapply(CPS$Education == "High School", CPS$MetroArea, mean, na.rm=TRUE))
tapply(CPS$MetroAreaCode,CPS$State,mean,na.rm=TRUE)
tapply(CPS$MetroAreaCode,CPS$State,mean)
tapply(CPS$State,is.na(CPS$MetroAreaCode),mean)
tapply(is.na(CPS$MetroAreaCode),CPS$State,mean)
sort(tapply(is.na(CPS$MetroAreaCode),CPS$State,mean))
sort(tapply(CPS$Hispanic,CPS$Metro,mean))
sort(tapply(is.na(CPS$Hispanic),CPS$Metro,mean))
str(CPS)
sort(tapply(is.na(CPS$Hispanic),CPS$MetroArea,mean))
tapply(is.na(CPS$Hispanic),CPS$MetroArea,mean)
tapply(CPS$MetroArea,CPS$Hispanic == 1,sum)
table(CPS$MetroArea, CPS$Sex)
sort(table(CPS$MetroArea, CPS$Sex))
table(CPS$MetroArea, CPS$Sex)
table(CPS$MetroArea)
sort(table(CPS$MetroArea))
table(CPS$MetroArea)
table(CPS$MetroArea, CPS$Sex)
ls()
cm
CPS = merge(CPS, cm, by.x="CountryCode", by.y="Code", all.x=TRUE)
str(CPS)
CPS = merge(CPS, cm, by.x="CountryOfBirthCode", by.y="Code", all.x=TRUE)
str(CPS)
summary(CPS)
table(CPS$Country, CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA")
tapply(CPS$MetroArea, CPS$Country="India", na.rm=TRUE)
tapply(CPS$MetroArea, CPS$Country=="India", na.rm=TRUE)
tapply(CPS$MetroArea, CPS$Country=="India", mean, na.rm=TRUE)
subset(CPS$MetroArea, CPS$Country="India")
subset(CPS$MetroArea, CPS$Country=="India")
nrow(subset(CPS$MetroArea, CPS$Country=="India"))
a = subset(CPS$MetroArea, CPS$Country=="India")
a
nrow(a)
summary(a)
sort(a)
sort(summary(a))
a = subset(CPS$MetroArea, CPS$Country=="Brazil")
sort(summary(a))
a = subset(CPS$MetroArea, CPS$Country=="Somalia")
sort(summary(a))
tapply(CPS$Hispanic,CPS$MetroArea, mean, na.rm=TRUE)
sort(tapply(CPS$Hispanic,CPS$MetroArea, mean, na.rm=TRUE))
a = tapply(CPS$Race=="Asian",CPS$MetroArea, mean, na.rm=TRUE)
a
summary(a)
b = subset(a > 0.20)
b = subset(a, a > 0.20)
b
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm=TRUE))
summary(CPS)
tapply(CPS$Country != "United States", CPS$MetroArea, sum)
sort(tapply(CPS$Country != "United States", CPS$MetroArea, sum, na.rm=TRUE))
table(CPS$MetroArea)
nrow(table(CPS$MetroArea))
sort(table(CPS$MetroArea))
1668 / 5409
mvt = read.csv("mvt.csv", stringsAsFactors = FALSE)
str(mvt)
mvt$Date = strptime(mvt$Date, format="%m/%d/%y %H:%M")
mvt$Weekday = weekdays(mvt$Date)
str(mvt)
mvt$Hour = mvt$Date$Hour
str(mvt)
mvt$Hour = mvt$Date$hour
str(mvt)
table(mvt$Weekday)
WeekdayCounts = as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
library(ggplot2)
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Sunday","Monday","Tuesday","Wednesday","Thursday", "Friday","Saturday"))
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1)) + xlabl("Day of the week") + ylab("Total Motor Vehicle Theft")
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1)) + xlab("Day of the week") + ylab("Total Motor Vehicle Theft")
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1),linetype=2) + xlab("Day of the week") + ylab("Total Motor Vehicle Theft")
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1),alpha=0.3) + xlab("Day of the week") + ylab("Total Motor Vehicle Theft")
table(mvt$Weekday, mvt$Hour)
DayHoursCounts = as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DaysHoursCounts)
str(DayHoursCounts)
DayHourCounts$Hour = as.numeric(as.character(DayHourCounts$Var2))
DayHoursCounts$Hour = as.numeric(as.character(DayHoursCounts$Var2))
ggplot(DayHoursCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1))
ggplot(DayHoursCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Var1))
, size=2
ggplot(DayHoursCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Var1), size=2)
DayHoursCount$Var1 = factor(DayHoursCounts$Var1, ordered=TRUE, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"","Sunday"))
DayHoursCount$Var1 = factor(DayHoursCounts$Var1, ordered=TRUE, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
DayHoursCounts$Var1 = factor(DayHoursCounts$Var1, ordered=TRUE, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday"))
ggplot(DayHoursCounts, aes=(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq))
ggplot(DayHoursCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq))
ggplot(DayHoursCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq)) + scale_fill_gradient(name="Total MV Thefts") + theme(axis.title.y = element_blank())
ggplot(DayHoursCounts, aes(x=Hour, y=Var1)) + geom_tile(aes(fill=Freq)) + scale_fill_gradient(name="Total MV Thefts", low="white", high="red") + theme(axis.title.y = element_blank())
install.packages("maps")
install.packages("ggmap")
library(maps)
library(ggmap)
chicago = get_map(location="chicago", zoom=11)
ggmap(chicago)
ggmap(chicago) + geom_point(data=mvt[1:100,],aes=(x=Longitude, y=Latitude))
ggmap(chicago) + geom_point(data=mvt[1:100],aes=(x=Longitude, y=Latitude))
ggmap(chicago) + geom_point(data=mvt[1:100],aes=(x=Longitude, y=Latitude))
ggmap(chicago) + geom_point(data=mvt[1:100],aes(x=Longitude, y=Latitude))
ggmap(chicago) + geom_point(data=mvt[1:100,],aes(x=Longitude, y=Latitude))
LatLongCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude$2))))
,
LatLongCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2))))
LatLongCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
str(LatLongCounts)
LatLonCounts = as.numeric(as.character(LatLongCounts$Var1))
LatLonCounts = as.numeric(as.character(LatLongCounts$Var1))
LatLongCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
LatLongCounts$Long = as.numeric(as.character(LatLongCounts$Var1))
LatLongCounts$Lat = as.numeric(as.character(LatLongCounts$Var2))
ggmap(chicago) + geom_point(data=LatLongCounts, aes(x=Long, y=Lat, color=Freq, size=Freq))
ggmap(chicago) + geom_point(data=LatLongCounts, aes(x=Long, y=Lat, color=Freq, size=Freq)) + scale_color_gradient(low="yellow", high="red")
ggmap(chicago) + geom_tile(data=LatLongCounts, aes(x=Long, y = Lat, alpha=Freq)), fill="red")
ggmap(chicago) + geom_tile(data=LatLongCounts, aes(x=Long, y = Lat, alpha=Freq)), fill="red")
ggmap(chicago) + geom_tile(data=LatLongCounts, aes(x=Long, y = Lat, alpha=Freq), fill="red")
LatLongCount2 = subset(LatLongCounts, Freq > 0)
str(LatLongCount2)
str(LatLongCounts)
1638-686
ggmap(chicago) + geom_tile(data=LatLongCounts2, aes(x=Long, y = Lat, alpha=Freq), fill="red")
ggmap(chicago) + geom_tile(data=LatLongCount2, aes(x=Long, y = Lat, alpha=Freq), fill="red")
murders = read.csv("murders.csv")
str(murders)
statesMap = map_data("state")
str(statesMap)
ggplot(statesMap,aes(x=long, y=lat, group=group)) +geom_polygon(fill="white", color="black") + coord_map("mercator")
murders$region = tolower(murders$State)
murderMap = merge(statesMap, murders, by="region")
str(murderMap)
ggplot(murderMap, aes(x=long, y=lat, group=group, fill=Murders)) + geom_polygon(color="black") + scale_fill_gradient(low=black, high="red", guide= "legend")
ggplot(murderMap, aes(x=long, y=lat, group=group, fill=Murders)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide= "legend")
ggplot(murderMap, aes(x=long, y=lat, group=group, fill=Population)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide= "legend")
murderMap$MurderRate = murderMap$Murders / murderMap$Population * 100000
ggplot(murderMap, aes(x=long, y=lat, group=group, fill=MurderRate)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide= "legend")
ggplot(murderMap, aes(x=long, y=lat, group=group, fill=MurderRate)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide= "legend", limits=c(0.9,10))
ggplot(murderMap, aes(x=long, y=lat, group=group, fill=GunOwnership)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide= "legend", limits=c(0.9,10))
ggplot(murderMap, aes(x=long, y=lat, group=group, fill=GunOwnership)) + geom_polygon(color="black") + scale_fill_gradient(low="black", high="red", guide= "legend")
